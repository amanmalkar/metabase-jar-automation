#---------------- Phase 1: Set security group for Metabase app instances & boot -----------------------------
---
- name: Create AWS resources
  hosts: localhost
  connection: local
  gather_facts: false

  tasks:
  - name: Create App Security group
    ec2_group:
      name: "{{app_sec_grp}}"
      description: "Metabase Security Group"
      region: "{{aws_region}}"
      vpc_id: "{{vpc_id}}"
      aws_access_key: "{{aws_access_key}}"
      aws_secret_key: "{{aws_secret_key}}"
      rules:
        - proto: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 3000
          to_port: 3000
          cidr_ip: 0.0.0.0/0
      rules_egress:
        - proto: all
          cidr_ip: 0.0.0.0/0
    register: app_firewall
  

  - name: Create App EC2 instances
    ec2:
      aws_access_key: "{{aws_access_key}}"
      aws_secret_key: "{{aws_secret_key}}"
      key_name: "{{key_name}}"
      region: "{{aws_region}}"
      group_id: "{{app_firewall.group_id}}"
      instance_type: "{{instance_type}}"
      image: "{{app_ami_id}}"
      wait: yes
      count: 2
      instance_tags:
        Name: metabase-app
    register: ec2_app

  - name: Create App group for SSH
    add_host:
      hostname: "{{ item.public_ip }}"
      groupname: appServers
      ansible_ssh_private_key_file: /Users/sensei/Downloads/ogMacKey.pem
    with_items: "{{ ec2_app.instances }}"

  - name: Wait to SSH
    wait_for:
      host: "{{ item.public_ip }}"
      port: 22
      state: started
    with_items: "{{ ec2_app.instances }}"

#------------------- Phase 2: Configure Launched Instances ---------------------

- hosts: appServers
  become: yes
  remote_user: ec2-user
  gather_facts: true

  tasks:
    - name: update packages
      yum:
        name: '*'
        state: latest
    
    - name: install docker
      yum:
        name: docker
        state: latest

    - name: install docker-py
      pip:
        name: docker-py

    - name: start docker
      service:
        name: docker
        state: started

    - name: run metabase
      docker_container:
        name: metabase
        image: metabase/metabase
        published_ports: 3000:3000


# ------------------------------- Phase 3: Integrate instances with the load balancer ---------------

- hosts: localhost 
  connection: local
  tasks:
    - name: Create ELB
      elb_classic_lb:
        name: "test-lb"
        state: present
        region: us-east-1
        zones:
          - us-east-1a
          - us-east-1b
          - us-east-1c
          - us-east-1d
          - us-east-1e
          - us-east-1f
        listeners:
          - protocol: https
            load_balancer_port: 443
            instance_protocol: http
            instance_port: 3000
            ssl_certificate_id: "arn:aws:iam::<your-iam-id and cert path>"
        health_check:
            ping_protocol: http
            ping_port: 3000
            ping_path: "/"
            response_timeout: 5
            interval: 30
            unhealthy_threshold: 2
            healthy_threshold: 10
    
    - name: Add instances to LB
      ec2_elb:
        state: present
        ec2_elbs: "test-lb"
        region: "{{ item.region }}"
        instance_id: "{{ item.id }}"
      with_items: "{{ ec2_app.instances }}"
      ignore_errors: yes



